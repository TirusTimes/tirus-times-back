// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  OPEN
  STARTED
  FINISHED
  EVALUATE
}

enum TEAM {
  ONE
  TWO
}

model User {
  id            Int               @id @default(autoincrement())
  username      String            @unique
  firstname     String
  lastname      String
  email         String            @unique
  password      String
  position      String
  age           Int
  gender        String
  groups        Group[]
  matchs        Match[]
  invitesSended InviteUser[]
  avaliations   UserAvaliations[]
  created_at    DateTime          @default(now())
  teamId        Int?
  Team          Team?             @relation(fields: [teamId], references: [id])
}

model Group {
  id           Int          @id @default(autoincrement())
  name         String
  users        User[]
  adminID      Int
  historyMatch Match[]
  invites      InviteUser[]
  created_at   DateTime     @default(now())
}

model Match {
  id          Int      @id @default(autoincrement())
  location    String
  date        DateTime
  time        String
  playerLimit Int      @default(12)
  players     User[]
  group       Group    @relation(fields: [groupId], references: [id])
  groupId     Int
  status      Status   @default(OPEN)
  created_at  DateTime @default(now())
}

model InviteUser {
  group   Group   @relation(fields: [groupId], references: [id])
  groupId Int
  user    User    @relation(fields: [userId], references: [id])
  userId  Int
  status  String? @default("WAITING")

  @@id([userId, groupId])
}

model Team {
  id         Int      @id @default(autoincrement())
  users      User[]
  created_at DateTime @default(now())
}

model Avaliations {
  id              Int               @id @default(autoincrement())
  avaliation      Int               @default(50)
  UserAvaliations UserAvaliations[]
}

model UserAvaliations {
  user         User        @relation(fields: [userId], references: [id])
  userId       Int
  avaliation   Avaliations @relation(fields: [avaliationId], references: [id])
  avaliationId Int

  @@id([userId, avaliationId])
}
